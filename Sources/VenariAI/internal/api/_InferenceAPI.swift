// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _InferenceAPI: InferenceAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func sneakerId(request: Shared.SneakersIdRequest) async throws -> Response<Operations.SneakerIdResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSneakerIdRequest(with: configuration, request: request)
            },
            handleResponse: handleSneakerIdResponse
        )
    }
    
    public func sneakerIdBatch(request: Shared.SneakersIdBatchRequest) async throws -> Response<Operations.SneakerIdBatchResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSneakerIdBatchRequest(with: configuration, request: request)
            },
            handleResponse: handleSneakerIdBatchResponse
        )
    }
    
    public func sneakerIdAsync(request: Shared.SneakersIdAsyncRequest) async throws -> Response<Operations.SneakerIdAsyncResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSneakerIdAsyncRequest(with: configuration, request: request)
            },
            handleResponse: handleSneakerIdAsyncResponse
        )
    }
    
    public func sneakerIdBatchAsync(request: Shared.SneakersIdBatchAsyncRequest) async throws -> Response<Operations.SneakerIdBatchAsyncResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSneakerIdBatchAsyncRequest(with: configuration, request: request)
            },
            handleResponse: handleSneakerIdBatchAsyncResponse
        )
    }

}

// MARK: - Request Configuration

private func configureSneakerIdRequest(with configuration: URLRequestConfiguration, request: Shared.SneakersIdRequest) throws {
    configuration.path = "/v1/sneakers/id"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureSneakerIdBatchRequest(with configuration: URLRequestConfiguration, request: Shared.SneakersIdBatchRequest) throws {
    configuration.path = "/v1/sneakers/id/batch"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureSneakerIdAsyncRequest(with configuration: URLRequestConfiguration, request: Shared.SneakersIdAsyncRequest) throws {
    configuration.path = "/v1/sneakers/id/async"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureSneakerIdBatchAsyncRequest(with configuration: URLRequestConfiguration, request: Shared.SneakersIdBatchAsyncRequest) throws {
    configuration.path = "/v1/sneakers/id/batch/async"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleSneakerIdResponse(response: Client.APIResponse) throws -> Operations.SneakerIdResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .twoHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 400 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fourHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdInferenceResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 403 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fourHundredAndThreeApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdInferenceResponseResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 500 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fiveHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdInferenceResponse500ResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleSneakerIdBatchResponse(response: Client.APIResponse) throws -> Operations.SneakerIdBatchResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .twoHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdBatchResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 400 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fourHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdBatchInferenceResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 403 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fourHundredAndThreeApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdBatchInferenceResponseResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 500 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fiveHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdBatchInferenceResponse500ResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleSneakerIdAsyncResponse(response: Client.APIResponse) throws -> Operations.SneakerIdAsyncResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .twoHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdAsyncResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 400 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fourHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdAsyncInferenceResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 403 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fourHundredAndThreeApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdAsyncInferenceResponseResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 500 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fiveHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdAsyncInferenceResponse500ResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleSneakerIdBatchAsyncResponse(response: Client.APIResponse) throws -> Operations.SneakerIdBatchAsyncResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .twoHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdBatchAsyncResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 400 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fourHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdBatchAsyncInferenceResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 403 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fourHundredAndThreeApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdBatchAsyncInferenceResponseResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 500 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .fiveHundredApplicationJsonObject(try JSONDecoder().decode(Operations.SneakerIdBatchAsyncInferenceResponse500ResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

