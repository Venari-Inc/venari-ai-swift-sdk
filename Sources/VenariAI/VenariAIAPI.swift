// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

/// Defines the operations supported by the API.
///
/// This protocol defines all of the operations supported by the API. It is implemented by ``Client`` which can be used to make these API requests and handle their responses.
///
/// ## Topics
///
/// ### API calls
///
/// These methods allow you to make requests to the API.
///
///
/// ### Scoped API calls
///
/// These properties logically group other parts of the API.
///
/// - ``inference``
/// - ``search``
/// - ``catalog``
///
public protocol VenariAIAPI {

    // MARK: - Scoped APIs
    var inference: InferenceAPI { get }
    var search: SearchAPI { get }
    var catalog: CatalogAPI { get }
}

// MARK: - InferenceAPI
/// ## Topics
///
/// ### API calls
///
/// - ``sneakerId(request:)``
/// - ``sneakerIdBatch(request:)``
/// - ``sneakerIdAsync(request:)``
/// - ``sneakerIdBatchAsync(request:)``
///
public protocol InferenceAPI {
    /// Identify one sneaker from a single image URL.
    /// 
    /// - Parameter request: A ``Shared/SneakersIdRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/SneakerIdResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func sneakerId(request: Shared.SneakersIdRequest) async throws -> Response<Operations.SneakerIdResponse>

    /// Identify one sneaker from an array of image URLs.
    /// 
    /// - Parameter request: A ``Shared/SneakersIdBatchRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/SneakerIdBatchResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func sneakerIdBatch(request: Shared.SneakersIdBatchRequest) async throws -> Response<Operations.SneakerIdBatchResponse>

    /// Identify one sneaker from a single image URL and receive the response as a webhook to a provided URL.
    /// 
    /// - Parameter request: A ``Shared/SneakersIdAsyncRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/SneakerIdAsyncResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func sneakerIdAsync(request: Shared.SneakersIdAsyncRequest) async throws -> Response<Operations.SneakerIdAsyncResponse>

    /// Identify one sneaker from an array of image URLs and receive the response as a webhook to a provided URL.
    /// 
    /// - Parameter request: A ``Shared/SneakersIdBatchAsyncRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/SneakerIdBatchAsyncResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func sneakerIdBatchAsync(request: Shared.SneakersIdBatchAsyncRequest) async throws -> Response<Operations.SneakerIdBatchAsyncResponse>
}

// MARK: - SearchAPI
/// ## Topics
///
/// ### API calls
///
/// - ``productData(request:)``
/// - ``catalogSearch(request:)``
/// - ``similarByItem(request:)``
///
public protocol SearchAPI {
    /// Search product details by internal product uuid.
    /// 
    /// - Parameter request: A ``Operations/ProductDataRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/ProductDataResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func productData(request: Operations.ProductDataRequest) async throws -> Response<Operations.ProductDataResponse>

    /// Search product details by text query.
    /// 
    /// - Parameter request: A ``Operations/CatalogSearchRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/CatalogSearchResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func catalogSearch(request: Operations.CatalogSearchRequest) async throws -> Response<Operations.CatalogSearchResponse>

    /// Similarity search by item.
    /// 
    /// - Parameter request: A ``Shared/SimilarItemPayload`` object describing the input to the API operation
    /// - Returns: A ``Operations/SimilarByItemResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func similarByItem(request: Shared.SimilarItemPayload) async throws -> Response<Operations.SimilarByItemResponse>
}

// MARK: - CatalogAPI
/// ## Topics
///
/// ### API calls
///
/// - ``catalogItemUpdate(request:)``
/// - ``catalogItemAdd(request:)``
///
public protocol CatalogAPI {
    /// Updates a catalog item status.
    /// 
    /// - Parameter request: A ``Operations/CatalogItemUpdateRequestBody`` object describing the input to the API operation
    /// - Returns: A ``Operations/CatalogItemUpdateResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func catalogItemUpdate(request: Operations.CatalogItemUpdateRequestBody) async throws -> Response<Operations.CatalogItemUpdateResponse>

    /// Adds an item to the catalog database.
    /// 
    /// - Parameter request: A ``Shared/CatalogItem`` object describing the input to the API operation
    /// - Returns: A ``Operations/CatalogItemAddResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``VenariAIError``
    func catalogItemAdd(request: Shared.CatalogItem) async throws -> Response<Operations.CatalogItemAddResponse>
}
