// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Operations {
    /// Successful processing of image URL
    public struct SneakerIdResponseBody {
        /// The inference confidence value.
        @DecimalSerialized
        public private(set) var confidence: Double
        public let meta: Shared.MetaData
        public let product: Shared.Product
        /// User-defined flat object to be returned in the response.
        public let custom: [String: AnyValue]?
        public let variants: [Shared.Product]?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter confidence: The inference confidence value.
        /// - Parameter custom: User-defined flat object to be returned in the response.
        ///
        public init(confidence: Double, meta: Shared.MetaData, product: Shared.Product, custom: [String: AnyValue]? = nil, variants: [Shared.Product]? = nil) {
            self._confidence = DecimalSerialized<Double>(wrappedValue: confidence)
            self.meta = meta
            self.product = product
            self.custom = custom
            self.variants = variants
        }
    }
}

extension Operations.SneakerIdResponseBody: Codable {
    enum CodingKeys: String, CodingKey {
        case confidence
        case meta
        case product
        case custom
        case variants
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self._confidence = try container.decode(DecimalSerialized<Double>.self, forKey: .confidence)
        self.meta = try container.decode(Shared.MetaData.self, forKey: .meta)
        self.product = try container.decode(Shared.Product.self, forKey: .product)
        self.custom = try container.decodeIfPresent([String: AnyValue].self, forKey: .custom)
        self.variants = try container.decodeIfPresent([Shared.Product].self, forKey: .variants)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self._confidence, forKey: .confidence)
        try container.encode(self.meta, forKey: .meta)
        try container.encode(self.product, forKey: .product)
        try container.encodeIfPresent(self.custom, forKey: .custom)
        try container.encodeIfPresent(self.variants, forKey: .variants)
    }
}

extension Operations.SneakerIdResponseBody {
    var confidenceWrapper: DecimalSerialized<Double> {
        return _confidence
    }
}
