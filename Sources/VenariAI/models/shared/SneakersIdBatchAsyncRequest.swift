// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A request model
    public struct SneakersIdBatchAsyncRequest {
        /// The sneaker's listing id to be asociated with the array of images.
        public let listingId: String
        /// The URL to which the webhook will be delivered once the identification process is completed.
        public let postbackUrl: String
        /// The sneaker's array of image URLs. Specify a maximum of 32 urls.
        public let urls: [String]
        /// The confidence threshold value.
        @DecimalSerialized
        public private(set) var confidenceThreshold: Double?
        /// User-defined flat object to be returned in the response.
        public let custom: [String: AnyValue]?
        /// A boolean flag for restrictive mode.
        public let restrictiveMode: Bool?

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter listingId: The sneaker's listing id to be asociated with the array of images.
        /// - Parameter postbackUrl: The URL to which the webhook will be delivered once the identification process is completed.
        /// - Parameter urls: The sneaker's array of image URLs. Specify a maximum of 32 urls.
        /// - Parameter confidenceThreshold: The confidence threshold value.
        /// - Parameter custom: User-defined flat object to be returned in the response.
        /// - Parameter restrictiveMode: A boolean flag for restrictive mode.
        ///
        public init(listingId: String, postbackUrl: String, urls: [String], confidenceThreshold: Double? = nil, custom: [String: AnyValue]? = nil, restrictiveMode: Bool? = nil) {
            self.listingId = listingId
            self.postbackUrl = postbackUrl
            self.urls = urls
            self._confidenceThreshold = DecimalSerialized<Double?>(wrappedValue: confidenceThreshold)
            self.custom = custom
            self.restrictiveMode = restrictiveMode
        }
    }
}

extension Shared.SneakersIdBatchAsyncRequest: Codable {
    enum CodingKeys: String, CodingKey {
        case listingId = "listing_id"
        case postbackUrl = "postback_url"
        case urls
        case confidenceThreshold = "confidence_threshold"
        case custom
        case restrictiveMode = "restrictive_mode"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.listingId = try container.decode(String.self, forKey: .listingId)
        self.postbackUrl = try container.decode(String.self, forKey: .postbackUrl)
        self.urls = try container.decode([String].self, forKey: .urls)
        self._confidenceThreshold = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .confidenceThreshold) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.custom = try container.decodeIfPresent([String: AnyValue].self, forKey: .custom)
        self.restrictiveMode = try container.decodeIfPresent(Bool.self, forKey: .restrictiveMode)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.listingId, forKey: .listingId)
        try container.encode(self.postbackUrl, forKey: .postbackUrl)
        try container.encode(self.urls, forKey: .urls)
        if self.confidenceThreshold != nil {
            try container.encode(self._confidenceThreshold, forKey: .confidenceThreshold)
        }
        try container.encodeIfPresent(self.custom, forKey: .custom)
        try container.encodeIfPresent(self.restrictiveMode, forKey: .restrictiveMode)
    }
}

extension Shared.SneakersIdBatchAsyncRequest {
    var confidenceThresholdWrapper: DecimalSerialized<Double?> {
        return _confidenceThreshold
    }
}
