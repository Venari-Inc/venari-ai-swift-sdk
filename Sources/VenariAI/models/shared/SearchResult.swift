// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct SearchResult {
        public let brandName: String
        public let id: String
        public let image: String
        public let productTitle: String
        public let styleId: String
        public let ageGroup: String?
        @DecimalSerialized
        public private(set) var releaseYear: Double?

        /// Creates an object with the specified parameters
        ///
        ///
        public init(brandName: String, id: String, image: String, productTitle: String, styleId: String, ageGroup: String? = nil, releaseYear: Double? = nil) {
            self.brandName = brandName
            self.id = id
            self.image = image
            self.productTitle = productTitle
            self.styleId = styleId
            self.ageGroup = ageGroup
            self._releaseYear = DecimalSerialized<Double?>(wrappedValue: releaseYear)
        }
    }
}

extension Shared.SearchResult: Codable {
    enum CodingKeys: String, CodingKey {
        case brandName = "brand_name"
        case id
        case image
        case productTitle = "product_title"
        case styleId = "style_id"
        case ageGroup = "age_group"
        case releaseYear = "release_year"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.brandName = try container.decode(String.self, forKey: .brandName)
        self.id = try container.decode(String.self, forKey: .id)
        self.image = try container.decode(String.self, forKey: .image)
        self.productTitle = try container.decode(String.self, forKey: .productTitle)
        self.styleId = try container.decode(String.self, forKey: .styleId)
        self.ageGroup = try container.decodeIfPresent(String.self, forKey: .ageGroup)
        self._releaseYear = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .releaseYear) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.brandName, forKey: .brandName)
        try container.encode(self.id, forKey: .id)
        try container.encode(self.image, forKey: .image)
        try container.encode(self.productTitle, forKey: .productTitle)
        try container.encode(self.styleId, forKey: .styleId)
        try container.encodeIfPresent(self.ageGroup, forKey: .ageGroup)
        if self.releaseYear != nil {
            try container.encode(self._releaseYear, forKey: .releaseYear)
        }
    }
}

extension Shared.SearchResult {
    var releaseYearWrapper: DecimalSerialized<Double?> {
        return _releaseYear
    }
}
