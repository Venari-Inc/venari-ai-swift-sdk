// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct Products {
        public let products: [Shared.SearchSimilarByItemResultsProducts]
        @DecimalSerialized
        public private(set) var results: Double

        /// Creates an object with the specified parameters
        ///
        ///
        public init(products: [Shared.SearchSimilarByItemResultsProducts], results: Double) {
            self.products = products
            self._results = DecimalSerialized<Double>(wrappedValue: results)
        }
    }
}

extension Shared.Products: Codable {
    enum CodingKeys: String, CodingKey {
        case products
        case results
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.products = try container.decode([Shared.SearchSimilarByItemResultsProducts].self, forKey: .products)
        self._results = try container.decode(DecimalSerialized<Double>.self, forKey: .results)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.products, forKey: .products)
        try container.encode(self._results, forKey: .results)
    }
}

extension Shared.Products {
    var resultsWrapper: DecimalSerialized<Double> {
        return _results
    }
}
