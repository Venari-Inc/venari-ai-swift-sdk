// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct SearchSimilarByItemResultsProducts {
        public let externalId: String
        public let id: String
        public let image: String
        @DecimalSerialized
        public private(set) var price: Double
        public let productType: String
        @DecimalSerialized
        public private(set) var rank: Double
        public let status: String
        public let title: String
        public let altText: String?
        public let brand: String?
        public let productUrl: String?
        @DecimalSerialized
        public private(set) var score: Double?

        /// Creates an object with the specified parameters
        ///
        ///
        public init(externalId: String, id: String, image: String, price: Double, productType: String, rank: Double, status: String, title: String, altText: String? = nil, brand: String? = nil, productUrl: String? = nil, score: Double? = nil) {
            self.externalId = externalId
            self.id = id
            self.image = image
            self._price = DecimalSerialized<Double>(wrappedValue: price)
            self.productType = productType
            self._rank = DecimalSerialized<Double>(wrappedValue: rank)
            self.status = status
            self.title = title
            self.altText = altText
            self.brand = brand
            self.productUrl = productUrl
            self._score = DecimalSerialized<Double?>(wrappedValue: score)
        }
    }
}

extension Shared.SearchSimilarByItemResultsProducts: Codable {
    enum CodingKeys: String, CodingKey {
        case externalId = "external_id"
        case id
        case image
        case price
        case productType = "product_type"
        case rank
        case status
        case title
        case altText = "alt_text"
        case brand
        case productUrl = "product_url"
        case score
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.externalId = try container.decode(String.self, forKey: .externalId)
        self.id = try container.decode(String.self, forKey: .id)
        self.image = try container.decode(String.self, forKey: .image)
        self._price = try container.decode(DecimalSerialized<Double>.self, forKey: .price)
        self.productType = try container.decode(String.self, forKey: .productType)
        self._rank = try container.decode(DecimalSerialized<Double>.self, forKey: .rank)
        self.status = try container.decode(String.self, forKey: .status)
        self.title = try container.decode(String.self, forKey: .title)
        self.altText = try container.decodeIfPresent(String.self, forKey: .altText)
        self.brand = try container.decodeIfPresent(String.self, forKey: .brand)
        self.productUrl = try container.decodeIfPresent(String.self, forKey: .productUrl)
        self._score = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .score) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.externalId, forKey: .externalId)
        try container.encode(self.id, forKey: .id)
        try container.encode(self.image, forKey: .image)
        try container.encode(self._price, forKey: .price)
        try container.encode(self.productType, forKey: .productType)
        try container.encode(self._rank, forKey: .rank)
        try container.encode(self.status, forKey: .status)
        try container.encode(self.title, forKey: .title)
        try container.encodeIfPresent(self.altText, forKey: .altText)
        try container.encodeIfPresent(self.brand, forKey: .brand)
        try container.encodeIfPresent(self.productUrl, forKey: .productUrl)
        if self.score != nil {
            try container.encode(self._score, forKey: .score)
        }
    }
}

extension Shared.SearchSimilarByItemResultsProducts {
    var rankWrapper: DecimalSerialized<Double> {
        return _rank
    }
    var priceWrapper: DecimalSerialized<Double> {
        return _price
    }
    var scoreWrapper: DecimalSerialized<Double?> {
        return _score
    }
}
