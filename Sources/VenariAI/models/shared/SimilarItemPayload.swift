// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// Payload for similar item search.
    public struct SimilarItemPayload {
        /// The external id of the item to search for.
        public let externalId: String
        /// The minimum score of the results to return.
        @DecimalSerialized
        public private(set) var minScore: Double?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter externalId: The external id of the item to search for.
        /// - Parameter minScore: The minimum score of the results to return.
        ///
        public init(externalId: String, minScore: Double? = nil) {
            self.externalId = externalId
            self._minScore = DecimalSerialized<Double?>(wrappedValue: minScore)
        }
    }
}

extension Shared.SimilarItemPayload: Codable {
    enum CodingKeys: String, CodingKey {
        case externalId = "external_id"
        case minScore = "min_score"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.externalId = try container.decode(String.self, forKey: .externalId)
        self._minScore = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .minScore) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.externalId, forKey: .externalId)
        if self.minScore != nil {
            try container.encode(self._minScore, forKey: .minScore)
        }
    }
}

extension Shared.SimilarItemPayload {
    var minScoreWrapper: DecimalSerialized<Double?> {
        return _minScore
    }
}
