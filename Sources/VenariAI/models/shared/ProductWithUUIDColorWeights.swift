// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct ProductWithUUIDColorWeights {
        public let colorName: String
        @DecimalSerialized
        public private(set) var weight: Double

        /// Creates an object with the specified parameters
        ///
        ///
        public init(colorName: String, weight: Double) {
            self.colorName = colorName
            self._weight = DecimalSerialized<Double>(wrappedValue: weight)
        }
    }
}

extension Shared.ProductWithUUIDColorWeights: Codable {
    enum CodingKeys: String, CodingKey {
        case colorName = "color_name"
        case weight
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.colorName = try container.decode(String.self, forKey: .colorName)
        self._weight = try container.decode(DecimalSerialized<Double>.self, forKey: .weight)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.colorName, forKey: .colorName)
        try container.encode(self._weight, forKey: .weight)
    }
}

extension Shared.ProductWithUUIDColorWeights {
    var weightWrapper: DecimalSerialized<Double> {
        return _weight
    }
}
