// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A request model
    public struct SneakersIdRequest {
        /// The sneaker's image URL.
        public let url: String
        /// The confidence threshold value.
        @DecimalSerialized
        public private(set) var confidenceThreshold: Double?
        /// User-defined flat object to be returned in the response.
        public let custom: [String: AnyValue]?
        /// A boolean flag for restrictive mode.
        public let restrictiveMode: Bool?
        /// Whether to include sneaker variants.
        public let variants: Bool?

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter url: The sneaker's image URL.
        /// - Parameter confidenceThreshold: The confidence threshold value.
        /// - Parameter custom: User-defined flat object to be returned in the response.
        /// - Parameter restrictiveMode: A boolean flag for restrictive mode.
        /// - Parameter variants: Whether to include sneaker variants.
        ///
        public init(url: String, confidenceThreshold: Double? = nil, custom: [String: AnyValue]? = nil, restrictiveMode: Bool? = nil, variants: Bool? = nil) {
            self.url = url
            self._confidenceThreshold = DecimalSerialized<Double?>(wrappedValue: confidenceThreshold)
            self.custom = custom
            self.restrictiveMode = restrictiveMode
            self.variants = variants
        }
    }
}

extension Shared.SneakersIdRequest: Codable {
    enum CodingKeys: String, CodingKey {
        case url
        case confidenceThreshold = "confidence_threshold"
        case custom
        case restrictiveMode = "restrictive_mode"
        case variants
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.url = try container.decode(String.self, forKey: .url)
        self._confidenceThreshold = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .confidenceThreshold) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.custom = try container.decodeIfPresent([String: AnyValue].self, forKey: .custom)
        self.restrictiveMode = try container.decodeIfPresent(Bool.self, forKey: .restrictiveMode)
        self.variants = try container.decodeIfPresent(Bool.self, forKey: .variants)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.url, forKey: .url)
        if self.confidenceThreshold != nil {
            try container.encode(self._confidenceThreshold, forKey: .confidenceThreshold)
        }
        try container.encodeIfPresent(self.custom, forKey: .custom)
        try container.encodeIfPresent(self.restrictiveMode, forKey: .restrictiveMode)
        try container.encodeIfPresent(self.variants, forKey: .variants)
    }
}

extension Shared.SneakersIdRequest {
    var confidenceThresholdWrapper: DecimalSerialized<Double?> {
        return _confidenceThreshold
    }
}
